---
import type { MicroCMSContentId, MicroCMSDate } from 'microcms-js-sdk';
import { type WebContent } from '../library/microcms';
import IndexItem from './IndexItem.astro';
// import { bgcolor } from '../library/randomcolor';
import { BGArray }from '../library/randomcolor'

interface Props {
 data: (Pick<WebContent, 'title'> & {
   title: string;
 } & MicroCMSContentId &
   MicroCMSDate)[];
 currentPage: number;
 lastPage: number;
 urlPrev: string | undefined;
 urlNext: string | undefined;
}

const { data, currentPage, lastPage, urlPrev, urlNext } = Astro.props;
---
<h1>
{currentPage === 1 ? <></> : <h1>{currentPage}ページ</h1>}
</h1>

<div class="item-wrapper">
  {
    data.map((content: any, index) => (
      // ここから切り分ける
      <IndexItem
        features={content.features}
        shortdescription={content.shortdescription}
        url={content.url}
        id={content.id}
        backGroundColor={BGArray[Math.floor(Math.random() * (BGArray.length))]}
      />
    ))
  }

</div>
<div class="pageBtnWrapper">
  <a href={urlPrev} class:list={['setPage', { invalid: !urlPrev }]}>{'< Next'}</a>
  <div class="pageNumberWrapper">
    {
      [...Array(lastPage)].map((_, id) => (
        <a class:list={['pageNumber', { active: currentPage === id + 1 }]} href={id === 0 ? '/' : `/page/${id + 1}/`}>
          {id + 1}
        </a>
      ))
    }
  </div>
  <a href={urlNext} class:list={['setPage', { invalid: !urlNext }]}>{'Prev >'}</a>
</div>

<style>
.pageBtnWrapper {
    display: flex;
    justify-content: space-around;
}
.pageNumberWrapper {
  white-space: nowrap;
  /* overflow-x: scroll; */
  overflow-x: auto;
  width: 40%;
}

.pageNumber {
  color: black;
  text-decoration: none;
  padding: 4px 8px;
  display: inline-block;
  text-align: center;
}

.active {
  font-weight: 700;
  border-bottom: 1px solid rgb(0, 0, 0);
}

.setPage {
  color: black;
  text-decoration: none;
  border: 1px solid black;
  padding: 8px;
}

.invalid {
  color: gray;
  border: 1px solid gray;
}

/* ********** */
.item-wrapper {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  padding: 10px 0;
}

.item-wrapper > .item:nth-child(1) {
  background-color: #FFE293;
}

.item-wrapper > .item:nth-child(2) {
  background-color: #9BF6FF;
}

.item-wrapper > .item:nth-child(3) {
  background-color: #FFADAD;
}

.item-wrapper > .item:nth-child(4) {
  background-color: #CAFFBF;
}

.item {
  margin: 5px 5px 5px;
  padding: 5px 5px 5px;
  width: 40%;
  background-color: red;
  /* box-shadowの値を使いまわしたい */
  box-shadow: 1px 1px 2px #dad5d5;
}

.item-title {
  font-size: 15px;
}

.item-description {
  font-size: 13px;
}

.link-wrapper {
  display: flex;
  justify-content: center;
  margin: 10px 0;
}

.jump-link, .jump-detail {
  background-color: #ffffff70;
  border: solid 1px #ffffff70;
  text-decoration: none;
  color: black;
  /* margin: 10px 20px; */
  padding: 3px;
  font-size: 10px;
  /* box-shadowの値を使いまわしたい */
  /* box-shadow: 1px 1px 2px #8b8b8b; */
}

.jump-link {
  margin-right: 5px;
}

.jump-detail {
  margin-left: 5px;
}

.jump-link:active, .jump-detail:active {
  box-shadow: 1px 1px 2px #dad5d5 inset;
}
</style>